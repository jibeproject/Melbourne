

#OSM_data <- read.csv("")
# network_data <- read.csv("")

N <- nrow(network_data) # number of loops
OSM_data_filter <- df_mel %>% filter(other_tags%like% "segregated"|other_tags%like% 
"sidewalk"|other_tags%like%"lanes:taxi:forward"|other_tags%like%"lanes:share_taxi:forward")
OSM_data <- as.data.frame(OSM_data_filter)
network_data <- as.data.frame(network_data) 

#join dataframes and add them to a list 
xy <- vector("list", N)
for (i in 1:N) {
  # generate a data.frame with 4 columns, and add a random number into each one
  # random number depends on the mean specified
  xy[[i]] <- inner_join(OSM_data,orig_data2[i,],by="highway")
  #xy[[i]] <- unique(xy[[i]])
  print (i)
  #nrow(xy)
}
# make a 1 row data_frame
first_row <- as.data.frame(inner_join(OSM_data ,network_data[2,],by="highway"))
first_row_joined <- processOsmTags(first_row)
# bind the lists in a dataframe 
for (i in 1:N){
  xj <- as.data.frame(xy[i])
  #xj <- distinct(xj)
  print (nrow(xj))
  if (nrow(xj)>0){
    query <- processOsmTags (xj)
    first_row_joined <-rbind(first_row_joined,query)
  }
  
  #if (query$is_segregated ==1){
  #check <-rbind(check,query)
  #}
  #check <-rbind(check,query)
  #nmm <-distinct(check)
  print(nrow(xj))
  print (i)
}

processOsmTags <- function(osm_df,this_defaults_df){
  # osm_df <- osm_metadata
  # this_defaults_df <- defaults_df
  
  #osmWithDefaults <- inner_join(osm_df,this_defaults_df,by="highway")
  # pre splitting the tags to save time
  tagList <- strsplit(gsub('=>',',', gsub('"', '', osmWithDefaults$other_tags)),',')
  
  osmWithDefaults <- osmWithDefaults %>%
    mutate(cycleway=ifelse(highway=="cycleway",4,0)) %>%
    dplyr::select(osm_id,highway,freespeed,permlanes,capacity,is_oneway,cycleway,is_cycle,is_walk,is_car,is_segregated,is_sidewalk,iscycleway_left,islanes_psv_forward,is_laneforward,is_lanebackward,is_cycleway_right)
  
  getMetadataInfo <- function(i) {
    df <- osmWithDefaults[i,]
    tags=tagList[[i]]
    
    if (length(tags)>1) {
      
      cycleway_tags <- tags[which(tags %like% "cycleway")+1]
      if(any(is.na(cycleway_tags))) cycleway_tags <- c()
      segregated_tags <- tags[which(tags %like% "segregated")]
      if(any(is.na(segregated_tags ))) segregated_tags <- c()
      sidewalk_tags <- tags[which(tags %like% "sidewalk")+1]
      if(any(is.na(sidewalk_tags))) sidewalk_tags <- c()
      cycleway_left <- tags[which(tags %like% "cycleway:left")+1]
      if(any(is.na(cycleway_left))) cycleway_left <- c()
      lanes_psv_forward <- tags[which(tags %like% "lanes:psv:forward")+1]
      if(any(is.na(lanes_psv_forward))) lanes_psv_forward <- c()
      lanes_forward <- tags[which(tags %like% "hgv:lanes:forward")+1]
      if(any(is.na(lanes_forward))) lanes_forward <- c()
      lanes_backward <- tags[which(tags %like% "hgv:lanes:backward")+1]
      if(any(is.na(lanes_forward))) lanes_forward <- c()
      cycleway_right <- tags[which(tags %like% "cycleway:right")+1]
      if(any(is.na(cycleway_left))) cycleway_right <- c() 
      bicycle_tags <- tags[which(tags=="bicycle")+1]
      if(any(is.na(bicycle_tags))) bicycle_tags <- c()
      car_tags <- tags[which(tags %in% c("car","motor_vehicle"))+1]
      if(any(is.na(car_tags))) car_tags <- c()
      foot_tags <- tags[which(tags %like% "foot")+1]
      if(any(is.na(foot_tags))) foot_tags <- c()
      surface_tags <- tags[which(tags=="surface")+1]
      if(any(is.na(surface_tags))) surface_tags <- c()
      oneway_tags <-  as.character(tags[which(tags=="oneway")+1])
      if(length(oneway_tags)==0) oneway_tags <- c()
      
      if("maxspeed" %in% tags) {
        maxSpeed=as.integer(tags[which(tags=="maxspeed")+1])
        # added this as some links had weird "masxspeed" values such as 500km/h!
        # 150km/h limit might cause issues for autobahns in Germany, AJ Jan 2021.
        if(!(is.na(maxSpeed)) & 140 < maxSpeed){
          message("Skiping speeds higher than 140km/h from OSM, consider editing processOSMTags.R if higher speeds are desired - AJ Jan 2021.")
          freeSpeed <- NA
        }else{
          freeSpeed=maxSpeed/3.6
        }
        # added is.na since one of the maxspeed has a value of "50; 40"
        if(!is.na(freeSpeed)) {
          df$freespeed[1]=freeSpeed
        }
      }
      if("lanes" %in% tags) {
        newLanes=as.integer(tags[which(tags=="lanes")+1])
        # some osm tags set the number of lanes to zero
        # added is.na since one of the lanes has a value of "2; 3"
        if(!is.na(newLanes) & newLanes > 0) {
          # Lane capacity is per lane and should not be adjusted based on number of lanes
          # df$laneCapacity[1]= df$laneCapacity[1] * (newLanes/df$permlanes[1])
          df$permlanes[1]=newLanes
        }
      }
      
      df$surface[1]=surface_tags
      if(any(oneway_tags=="yes")) df$is_oneway[1]=1
      #if(any(bicycle_tags %in% c("yes","designated"))) df$cycleway[1]="unmarked"
      if(any(cycleway_tags=="shared_lane")) df$cycleway[1]=1
      if(any(segregated_tags =="yes")) df$is_segregated[1]=1
      if(any(sidewalk_tags =="yes")) df$is_sidewalk[1]=1
      if(any(sidewalk_tags =="both")) df$is_sidewalk[1]=1
      if(any(cycleway_left =="track ")) df$iscycleway_left[1]=1
      if(any(cycleway_left =="lane")) df$iscycleway_left[1]=1
      if(any(cycleway_left =="shared_lane")) df$iscycleway_left[1]=1
      if(any(cycleway_left =="share_busway")) df$iscycleway_left[1]=1
      if(any(cycleway_left =="separate ")) df$iscycleway_left[1]=1
      
      if(any(lanes_psv_forward > as.numeric("0"))) df$islanes_psv_forward[1]=1
      
      if(any(lanes_forward > as.numeric("0"))) df$is_laneforward[1]=1
      if(any(lanes_backward > as.numeric("0"))) df$is_lanebackward[1]=1
      
      
      if(any(cycleway_right =="track ")) df$is_cycleway_right[1]=1
      if(any(cycleway_right =="lane")) df$is_cycleway_right[1]=1
      if(any(cycleway_right =="shared_lane")) df$is_cycleway_right[1]=1
      if(any(cycleway_right =="share_busway")) df$is_cycleway_right[1]=1
      if(any(cycleway_right =="separate ")) df$is_cycleway_right[1]=1
      
      
      #if(any(cycleway_tags_seg =="no")) df$is_segregated[1]=0
      if(any(cycleway_tags=="lane") & df$highway[1]!="cycleway") df$cycleway[1]=2
      if(any(cycleway_tags=="track")& df$highway[1]!="cycleway") df$cycleway[1]=3
      if(any(foot_tags=="no")& df$highway[1]=="cycleway") df$cycleway[1]=5
      if(any(car_tags=="no")) df$is_car[1]=0
      if(any(foot_tags=="no")) df$is_walk[1]=0
      if(any(foot_tags %in% c("yes","designated"))) df$is_walk[1]=1
      if(df$cycleway[1]>0 | any(bicycle_tags %in% c("yes","designated"))) df$is_cycle[1]=1
      if(any(bicycle_tags %in% "no")) df$is_cycle[1]=0
      
    }
    return(df)
  }
  
  osmAttributed <- lapply(1:nrow(osmWithDefaults),getMetadataInfo) %>%
    bind_rows() %>%
    # looks like the ones with no modes are mostly closed walking or cycling tracks
    filter(is_cycle+is_walk+is_car>0)
  
  return(osmAttributed)
}




