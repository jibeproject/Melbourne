library(dplyr)
library(tibble)
library(tidyr)
library(magrittr)
require(dplyr)
require(magrittr)
library (data.table)
library(parallel)
library(sf)
library(missForest)
library(future.apply)
library(qgisprocess)

osm <- st_read("edge_data.shp")
colnames(traffic_calm )
traffic_calm <- st_read("traffic_calm_all_final.shp")
traffic_calm_selected<- traffic_calm %>% select (traffic_ca,geometry)

unique(traffic_calm$traffic_ca)


#snap traffic_calming structures

snaptoOSMlines <- qgis_run_algorithm(
  "native:snapgeometries",
  BEHAVIOR = 1, #prefer closest points insert extra vertices where needed
  INPUT = traffic_calm_selected,
  REFERENCE_LAYER = osm,
  TOLERANCE = 20
)

#snapped points to sf object
snaptoOSMlines_sf <- sf::read_sf(qgis_output(snaptoOSMlines, "OUTPUT"))

#assign code to types of structures to calculate summary 

snaptoOSMlines_sf$barrier_type <- c(0) # empty column 
snaptoOSMlines_sf$barrier_type <- as.numeric(snaptoOSMlines_sf$barrier_type)
snaptoOSMlines_sf$barrier_type_count <- c(0) # empty column 
snaptoOSMlines_sf$barrier_type_count <- as.numeric(snaptoOSMlines_sf$barrier_type_count)



snaptoOSMlines_sf <- snaptoOSMlines_sf %>%
  mutate(barrier_type = case_when(
    traffic_ca == "island"~1,
    traffic_ca == "choker"~2,
    traffic_ca =="1 hour"~3,
    traffic_ca =="table"~4,
    traffic_ca =="speed_humps"~5,
    traffic_ca =="painted_island"~6,
    traffic_ca =="chicane"~7,
    traffic_ca =="hump"~8,
    traffic_ca =="cushion"~9,
    traffic_ca =="curb_extension"~10,
    traffic_ca =="bump"~11,
    traffic_ca =="rumble_strip"~12,
    traffic_ca =="cushion;chicane"~13,
    traffic_ca =="painted_table"~14,
    traffic_ca =="dip"~15,
    traffic_ca =="yes"~16,
    traffic_ca =="choked_island"~17,
    traffic_ca =="hump;chicane"~18,
    traffic_ca =="hump;crossing"~19,
    traffic_ca =="pinch_point"~20,
    traffic_ca =="choker,hump"~21,
    traffic_ca =="choked_table"~22,
    traffic_ca =="choker; table"~23,
    traffic_ca =="bollards"~24,
    traffic_ca =="hq"~25,
    traffic_ca =="hump;island"~26,
    traffic_ca =="island;choker"~27,
    traffic_ca =="chicane;island"~28,
    traffic_ca =="island;cushion"~29,
    traffic_ca =="choker;chicane"~30,
    traffic_ca ==NA~0
  ) )

#get counts of traffic_barriers
snaptoOSMlines_sf <- snaptoOSMlines_sf %>%
  mutate(barrier_type_count = case_when(
    barrier_type > 0 ~1,
  ) )
#replace na values with 0 
snaptoOSMlines_sf <- snaptoOSMlines_sf %>% replace_na(list(barrier_type_count = 0))
snaptoOSMlines_sf <- snaptoOSMlines_sf %>% replace_na(list(barrier_type = 0))

#check for results 
unique(snaptoOSMlines_sf$barrier_type)
unique(snaptoOSMlines_sf$barrier_type_count)
typeof(snaptoOSMlines_sf$barrier_type_count)
#summarize count
barrier_count <- qgis_run_algorithm(
  "qgis:joinbylocationsummary",
  DISCARD_NONMATCHING = F,
  INPUT = osm,
  JOIN = snaptoOSMlines_sf,
  SUMMARIES = 5, # 0 is for count 
  JOIN_FIELDS = 'barrier_type_count',#the column to join the attribute
)

barrier_count_table <- sf::read_sf(qgis_output(barrier_count, "OUTPUT"))
#check the results 
unique(barrier_count_table$barrier_type_count_sum )

# remove na vlaues with zero 
barrier_count_table <- barrier_count_table %>% replace_na(list(barrier_type_count_sum = 0))

# create an empty modal_filter column 
barrier_count_table  <- barrier_count_table  %>%
  rename(modal_filter_count=barrier_type_count_sum)

# calculate the median barrier type 
barrier_count_types <- qgis_run_algorithm(
  "qgis:joinbylocationsummary",
  DISCARD_NONMATCHING = F,
  INPUT = osm,
  JOIN = snaptoOSMlines_sf,
  SUMMARIES = 7, # 0 is for count 
  JOIN_FIELDS = 'barrier_type',#the column to join the attribute
)

barrier_count_types_table <- sf::read_sf(qgis_output(barrier_count_types, "OUTPUT"))
# check for results 
unique(barrier_count_types_table$barrier_type_median)
# round median values 
barrier_count_types_table$barrier_type_median<- round(barrier_count_types_table$barrier_type_median)
# replace code values with their actual class label 

barrier_count_types_table$edgeID <- 1:nrow(barrier_count_types_table)
barrier_count_types_table$barrier_type_label <- c(0) # empty column 
barrier_count_types_table$barrier_type_label <- as.character(barrier_count_types_table$barrier_type_label)

barrier_count_types_table <- barrier_count_types_table %>%
  mutate(barrier_type_label = case_when(
    barrier_type_median == 1 ~"island",
    barrier_type_median == 2~ "choker",
    barrier_type_median == 3 ~"1 hour",
    barrier_type_median == 4 ~"table",
    barrier_type_median == 5 ~"speed_humps",
    barrier_type_median == 6 ~"painted_island",
    barrier_type_median == 7~"chicane",
    barrier_type_median == 8~"hump",
    barrier_type_median == 9~"cushion",
    barrier_type_median == 10~"curb_extension",
    barrier_type_median == 11~"bump",
    barrier_type_median ==12~"rumble_strip",
    barrier_type_median ==13~"cushion;chicane",
    barrier_type_median ==14~"painted_table",
    barrier_type_median == 15 ~"dip",
    barrier_type_median == 16~"yes",
    barrier_type_median == 17~"choked_island",
    barrier_type_median == 18~"hump;chicane",
    barrier_type_median ==19~"hump;crossing",
    barrier_type_median ==20~"pinch_point",
    barrier_type_median ==21~"choker,hump",
    barrier_type_median ==22~"choked_table",
    barrier_type_median ==23~"choker; table",
    barrier_type_median ==24~"bollards",
    barrier_type_median ==25~"hq",
    barrier_type_median ==26~ "hump;island",
    barrier_type_median ==27~"island;choker",
    barrier_type_median ==28~"chicane;island",
    barrier_type_median ==29~"island;cushion",
    barrier_type_median ==30~"choker;chicane",
  ) )
#check results
unique(barrier_count_types_table$barrier_type_label)
#replace na values with none 
barrier_count_types_table<- barrier_count_types_table %>% replace_na(list(barrier_type_label = "none"))
final_result <-barrier_count_types_table%>% select(osm_id,from_id,to_id,TREE,barrier_type_label,edgeID)
modal_filter <- barrier_count_table %>% select(modal_filter_count)%>% st_drop_geometry() 
#bind modal_filter_count
final_result <-cbind(final_result,modal_filter)
#modify column names 
final_result  <- final_result %>%
  rename(traf_calm_ftr=barrier_type_label)
final_result$modal_filter <-final_result$traf_calm_ftr

#add speed data 
final_result$osm_id <- as.character(final_result$osm_id )
final_result <- left_join(final_result,traffic_data, by ='osm_id')
nrow(final_result)
st_write(final_result, dsn="modal_filter.shp")

