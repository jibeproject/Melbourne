#add libraries 
library(dplyr)
library(tibble)
library(tidyr)
library(magrittr)
require(dplyr)
require(magrittr)
library (data.table)
library(parallel)
library(sf)
install.packages("qgisprocess", dependencies = TRUE)

#load network edge geopackage data 

pack <- st_read("edge_data.gpkg", drivers = "GPKG")
#head (pack)
# add_columns to edge_data 
pack <- pack %>%
  add_column(is_oneway=NA,cycleway=NA,is_cycle=NA,is_walk=NA,is_car=NA,
             is_segregated=NA,is_sidewalk=NA,iscycleway_left=NA,islanes_psv_forward=NA,is_laneforward=NA,is_lanebackward=NA,
             is_cycleway_right=NA,cycleway.left=NA,cycleway.right = NA)
edge_data <- pack

edge_data$osm_id <- as.character(edge_data$osm_id)
edge_data$is_segregated <-as.numeric(edge_data$is_segregated)
edge_data$is_car <-as.numeric(edge_data$is_car)
edge_data$is_sidewalk <-as.numeric(edge_data$is_sidewalk)
edge_data$iscycleway_left <-as.numeric(edge_data$iscycleway_left)
edge_data$islanes_psv_forward <-as.numeric(edge_data$islanes_psv_forward)
edge_data$is_laneforward <-as.numeric(edge_data$is_laneforward)
edge_data$is_lanebackward <-as.numeric(edge_data$is_lanebackward)
edge_data$is_cycleway_right <-as.numeric(edge_data$is_cycleway_right)
edge_data$cycleway.right <-as.character(edge_data$cycleway.right)
edge_data$cycleway.left <-as.character(edge_data$cycleway.left)

# load metadata
osm_data <- read.csv("osm_metadata.csv")
#load quietness score data 

quiet.scores <- read.csv("ls.csv", stringsAsFactors = F)
quiet.scores <- quiet.scores[quiet.scores$highway != "",]
quiet.scores$highway <- gsub(" ","",quiet.scores$highway)

#head (quiet.scores)

#add tree coverge data
tree <- st_read("tree_cover2.gpkg", drivers = "GPKG")
#head (tree)
#unique(tree$TREE)


#Join metadata and edge data
joined <- inner_join(osm_data,edge_data,by="osm_id")
head (joined)
nrow(joined)
#process data to get scores 

modified_alg <- function(osmWithDefaults){

  tagList <- strsplit(gsub('=>',',', gsub("'", '', osmWithDefaults$other_tags)),',')
  
  

  
  osmWithDefaults <- osmWithDefaults %>%
    mutate(cycleway=ifelse(highway=="cycleway",4,0)) %>%
    dplyr::select(osm_id,highway,freespeed,permlanes,is_oneway,cycleway,is_cycle,is_walk,is_car,
                  is_segregated,is_sidewalk,iscycleway_left,islanes_psv_forward,is_laneforward,is_lanebackward,
                  is_cycleway_right,cycleway.left,cycleway.right,from_id,to_id,geom)
  
  getMetadataInfo <- function(i) {
    df <- osmWithDefaults[i,]
    tags=tagList[[i]]
    
    if (length(tags)>1) {
      
      cycleway_tags <- tags[which(tags %like% "cycleway")+1]
      if(any(is.na(cycleway_tags))) cycleway_tags <- c()
      bicycle_tags <- tags[which(tags=="'bicycle'")+1]
      if(any(is.na(bicycle_tags))) bicycle_tags <- c()
      car_tags <- tags[which(tags %in% c("car","motor_vehicle"))+1]
      if(any(is.na(car_tags))) car_tags <- c()
      foot_tags <- tags[which(tags %like% "foot")+1]
      if(any(is.na(foot_tags))) foot_tags <- c()
      surface_tags <- tags[which(tags=="surface")+1]
      if(any(is.na(surface_tags))) surface_tags <- c()
      oneway_tags <-  as.character(tags[which(tags=="oneway")+1])
      if(length(oneway_tags)==0) oneway_tags <- c()
      
      
      #added columns 
      
      segregated_tags <- tags[which(tags %like% "segregated")+1]
      if(any(is.na(segregated_tags ))) segregated_tags <- c()
      sidewalk_tags <- tags[which(tags %like% "sidewalk")+1]
      if(any(is.na(sidewalk_tags))) sidewalk_tags <- c()
      cycleway_left <- tags[which(tags %like% "cycleway:left")+1]
      if(any(is.na(cycleway_left))) cycleway_left <- c()
      lanes_psv_forward <- tags[which(tags %like% "lanes:bus:forward")+1]
      if(any(is.na(lanes_psv_forward))) lanes_psv_forward <- c()
      lanes_psv_forward <- tags[which(tags %like% "lanes:share_taxi:forward")+1]
      if(any(is.na(lanes_psv_forward))) lanes_psv_forward <- c()
      lanes_psv_forward <- tags[which(tags %like% "lanes:minibus:forward")+1]
      if(any(is.na(lanes_psv_forward))) lanes_psv_forward <- c()
      lanes_psv_forward <- tags[which(tags %like% "lanes:taxi:forward")+1]
      if(any(is.na(lanes_psv_forward))) lanes_psv_forward <- c()
      lanes_forward <- tags[which(tags %like% "lanes:forward")]
      if(any(is.na(lanes_forward))) lanes_forward <- c()
      lanes_backward <- tags[which(tags %like% "lanes:backward")]
      if(any(is.na(lanes_backward))) lanes_backward <- c()
      cycleway_right <- tags[which(tags %like% "cycleway:right")+1]
      if(any(is.na(cycleway_right))) cycleway_right <- c()
      
      
      
      
      if("maxspeed" %in% tags) {
        maxSpeed=as.integer(tags[which(tags=="maxspeed")+1])
        # added this as some links had weird "masxspeed" values such as 500km/h!
        # 150km/h limit might cause issues for autobahns in Germany, AJ Jan 2021.
        if(!(is.na(maxSpeed)) & 140 < maxSpeed){
          message("Skiping speeds higher than 140km/h from OSM, consider editing processOSMTags.R if higher speeds are desired - AJ Jan 2021.")
          freeSpeed <- NA
        }else{
          freeSpeed=maxSpeed/3.6
        }
        # added is.na since one of the maxspeed has a value of "50; 40"
        if(!is.na(freeSpeed)) {
          df$freespeed[1]=freeSpeed
        }
      }
      if("lanes" %in% tags) {
        newLanes=as.integer(tags[which(tags=="lanes")+1])
        # some osm tags set the number of lanes to zero
        # added is.na since one of the lanes has a value of "2; 3"
        if(!is.na(newLanes) & newLanes > 0) {
          # Lane capacity is per lane and should not be adjusted based on number of lanes
          # df$laneCapacity[1]= df$laneCapacity[1] * (newLanes/df$permlanes[1])
          df$permlanes[1]=newLanes
        }
      }
      
      df$surface[1]=surface_tags
      if(any(oneway_tags=="yes")) df$is_oneway[1]=1
      #if(any(bicycle_tags %in% c("yes","designated"))) df$cycleway[1]="unmarked"
      if(any(cycleway_tags=="shared_lane")) df$cycleway[1]=1
      if(any(cycleway_tags=="lane") & df$highway[1]!="cycleway") df$cycleway[1]=2
      if(any(cycleway_tags=="track")& df$highway[1]!="cycleway") df$cycleway[1]=3
      if(any(foot_tags=="no")& df$highway[1]=="cycleway") df$cycleway[1]=5
      if(any(car_tags=="no")) df$is_car[1]=0
      if(any(foot_tags=="no")) df$is_walk[1]=0
      if(any(foot_tags %in% c("yes","designated"))) df$is_walk[1]=1
      if(df$cycleway[1]>0 | any(bicycle_tags %in% c("yes","designated"))) df$is_cycle[1]=1
      if(any(bicycle_tags %in% "no")) df$is_cycle[1]=0
      # if(df$highway[1] %in% c('residential','unclassified','tertiary','secondary')=='TRUE') {df$is_car[1]= 1}
      #if (df$highway[1] == "residential"|df$highway[1] == "tertiary") {df$is_car[1]=1}
      
      #added_columns residential 
      
      if(any(segregated_tags =="yes")) df$is_segregated[1]=1
      if(any(sidewalk_tags =="yes")) df$is_sidewalk[1]=1
      if(any(sidewalk_tags =="both")) df$is_sidewalk[1]=1
      if(any(cycleway_left =="track")) df$iscycleway_left[1]=1
      if(any(cycleway_left =="lane")) df$iscycleway_left[1]=1
      if(any(cycleway_left =="shared_lane")) df$iscycleway_left[1]=1
      if(any(cycleway_left =="share_busway")) df$iscycleway_left[1]=1
      if(any(cycleway_left =="separate")) df$iscycleway_left[1]=1
      
      # if(any(lanes_psv_forward > as.numeric("'0'"))) df$islanes_psv_forward[1]=1
      # 
      # if(any(lanes_forward > 0)) df$is_laneforward[1]=1
      # if(any(lanes_backward > 0)) df$is_lanebackward[1]=1
      #if("lanes:forward" %in% lapply(lanes_forward[1], `[`, i)) df$is_laneforward= 1
      if(any(lanes_forward  =="lanes:forward")) df$is_laneforward[1]=1
      if(any(lanes_backward  =="lanes:backward")) df$is_lanebackward[1]=1
      
      
      if(any(cycleway_right =="track")) df$is_cycleway_right[1]=1
      if(any(cycleway_right =="lane")) df$is_cycleway_right[1]=1
      if(any(cycleway_right =="shared_lane")) df$is_cycleway_right[1]=1
      if(any(cycleway_right =="share_busway")) df$is_cycleway_right[1]=1
      if(any(cycleway_right =="separate")) df$is_cycleway_right[1]=1
      
      
      if(any(cycleway_left =="track")) df$cycleway.left[1] <- "track "
      if(any(cycleway_left =="lane")) df$cycleway.left[1]<- "lane " 
      if(any(cycleway_left =="shared_lane")) df$cycleway.left[1]<-"shared_lane "
      if(any(cycleway_left =="share_busway")) df$cycleway.left[1]<-"share_busway "
      if(any(cycleway_left =="separate")) df$cycleway.left[1]<-"separate "
      
      
      
      if(any(cycleway_right =="track")) df$cycleway.right[1]<-"track "
      if(any(cycleway_right =="lane")) df$cycleway.right[1]<-"lane " 
      if(any(cycleway_right =="shared_lane")) df$cycleway.right[1]<-"shared_lane "
      if(any(cycleway_right =="share_busway")) df$cycleway.right[1]<-"share_busway "
      if(any(cycleway_right =="separate")) df$cycleway.right[1]<-"separate "
      
    }
    df <- df %>% mutate_at(vars(c("is_oneway", "cycleway":"is_cycle", "is_walk","is_car","is_segregated",
                                  "is_sidewalk", "iscycleway_left", "islanes_psv_forward","is_laneforward","is_lanebackward","is_cycleway_right")), ~replace_na(.,0))
    #"is_sidewalk", "iscycleway_left", "islanes_psv_forward","is_laneforward","is_lanebackward","is_cycleway_right"
    return(df)
  }
  osmAttributed <- lapply(1:nrow(osmWithDefaults),getMetadataInfo) %>%
    bind_rows() %>%
    # looks like the ones with no modes are mostly closed walking or cycling tracks
    #filter(is_cycle+is_walk+is_car>0)
    
    return(osmAttributed)
  
  
} 

joined2 <- modified_alg(joined)
# replace na values with "no"
joined3 <- joined2 %>% replace_na(list(cycleway.right = "no ", cycleway.left = "no "))
#unique (joined3$cycleway.left)
#write.csv(joined2,"updated_22_jun.csv")
#join quietness index 
quietness_index <- left_join(joined3,quiet.scores, by = c("highway" = "highway","cycleway.left" = "cycleway.left",
                                          "cycleway.right" = "cycleway.right"))

#head (quietness_index)

# add tree coverage 

#filter the tree column 
tree2 <- tree%>% select (osm_id,from_id,to_id,TREE)
#head (tree2)
#unique(tree2$TREE)
#nrow(tree2)
tree2$osm_id <- as.character(tree2$osm_id)
# join tree data with 
tree3 <- left_join(quietness_index,tree2, by = c("osm_id" = "osm_id","from_id" = "from_id",
                                                          "to_id" = "to_id"))
#head (tree3)
#replace NA values in tree column
tree4 <- tree3 %>% replace_na(list(TREE = "np"))
nrow(quietness_index)
unique(tree4$TREE)
#write the data to a geopackage file 
st_write(tree4, dsn="edge_data.gpkg", layer='updated_tree&quietness',drivers = "GPKG")




