install.packages("missForest")
install.packages("future.apply")
install.packages("qgisprocess", dependencies = TRUE)
library(dplyr)
library(tibble)
library(tidyr)
library(magrittr)
require(dplyr)
require(magrittr)
library (data.table)
library(parallel)
library(sf)
library(missForest)
library(future.apply)
library(qgisprocess)

#read edge data
osm <- st_read("edge_data.gpkg", layer='traffic_calm_july4')

#add_traffic_data

traffic_data <- st_read("OSM_attributes.csv")
traffic_data <- as.data.frame(traffic_data)
traffic_data  <- traffic_data %>% select (osm_id,maxspeed)


# read width data
mastermap <- st_read("road_width.shp")


mastermap <- mastermap %>%
  filter (!is.na(TRAFFIC_WI))

#Take point sample on master map at certain distance and start/end offset
mastermappoints <- qgis_run_algorithm(
  "native:pointsalonglines",
  DISTANCE = 10,
  END_OFFSET = 5,
  INPUT = mastermap,#change the input here
  START_OFFSET = 5
)

#convert the temporary point samples to sf object
mastermappoints_sf <- sf::read_sf(qgis_output(mastermappoints, "OUTPUT"))


#snap the points to OSM lines with a tolerance
snaptoOSMlines <- qgis_run_algorithm(
  "native:snapgeometries",
  BEHAVIOR = 1, #prefer closest points insert extra vertices where needed
  INPUT = mastermappoints_sf,
  REFERENCE_LAYER = osm,
  TOLERANCE = 20
)



#snapped points to sf object
snaptoOSMlines_sf <- sf::read_sf(qgis_output(snaptoOSMlines, "OUTPUT"))


snaptoOSMlines_sf  <- st_read("traffic_calm_all_final.gpkg",layer='snaptoOSMlines_sf', drivers = "GPKG")

snapbuffer <- st_buffer(snaptoOSMlines_sf, dist = 0.05)


joinwidthtoosmlines <- qgis_run_algorithm(
  "qgis:joinbylocationsummary",
  DISCARD_NONMATCHING = F,
  INPUT = osm,
  JOIN = test,
  SUMMARIES = 7, # 10 is for majority, 7 for median
  JOIN_FIELDS = 'TRAFFIC_WI',#the column to join the attribute
)


joinwidthtoosmlines_sf <- sf::read_sf(qgis_output(joinwidthtoosmlines2, "OUTPUT"))


# add _road_type classification
joinwidthtoosmlines_sf$road_type <- c(0) # empty column 
joinwidthtoosmlines_sf$road_type <- as.numeric(joinwidthtoosmlines_sf2$road_type)




joinwidthtoosmlines_sf <- joinwidthtoosmlines_sf %>%
  mutate(road_type = case_when(is_cycle == 1 & highway =="residential"~ 8,
                               is_cycle == 1 & highway =="primary"~ 3,
                               is_cycle == 1 & highway =="road"~ 4,
                               is_cycle == 1 & highway =="tertiary"~ 6,
                               is_cycle == 1 & highway =="service"~ 7,
                               is_cycle == 0 & highway =="trunk"~ 10,
                               highway =="path"~ 9,
                               is_cycle == 0 & highway =="path"~ 8,
                               is_cycle == 0 & highway =="motorway"~ 5,
                               highway =="cycleway"~ 1,
                               highway =="living_street"~ 2,
                               is_cycle == 1 & highway =="trunk"~ 9,
                               highway !="cycleway"~ 0) )


# If some OSM links missed during the joining process, transfer the attribute from one row to another


jointranfer <- joinwidthtoosmlines_sf %>%
  group_by(osm_id) %>%
  mutate(TRAFFIC_WI_median= mean (TRAFFIC_WI_median[!is.na(TRAFFIC_WI_median)])) #this does the transfer

# add traffic speed data

jointranfer <- left_join(jointranfer,traffic_data, by ='osm_id')

#Impute the missing width information using other veriables using random forest algorithom
jointranfermissing.impu <- jointranfer %>%
  dplyr::select(edgeID, is_sidewalk,road_type,is_oneway,maxspeed,TRAFFIC_WI_median) %>%
  mutate(sidewalk= case_when(
    is_sidewalk == 0  ~ 0,
    is_sidewalk == 1  ~ 1)) %>%
  dplyr::select(edgeID,sidewalk,road_type,is_oneway,maxspeed,TRAFFIC_WI_median) %>%
  mutate(onewaysummary_num = case_when(
    is_oneway == 0 ~ 0,
    is_oneway == 1 ~ 1
  ))%>% dplyr::select(edgeID,sidewalk,road_type,onewaysummary_num,maxspeed,TRAFFIC_WI_median) %>%
  st_drop_geometry() %>%
  as.data.frame()

jointranfermissing.impu$maxspeed <-as.numeric(jointranfermissing.impu$maxspeed)
jointranfermissing.impu [,2:6] <- missForest(jointranfermissing.impu)$ximp[,2:6]
jointranfermissing.impu2 <- jointranfermissing.impu %>%
  dplyr::select(edgeID, TRAFFIC_WI_median) %>%
  rename (averageWidth.imp = TRAFFIC_WI_median)



jointranfermissing_imp_add <- left_join(jointranfer,jointranfermissing.impu2, by = 'edgeID')


jointranfermissing_imp_add  <- st_read("traffic_calm_all_final.gpkg",layer='jointranfermissing_imp_add', drivers = "GPKG")



osm.join.width.clean <- function(road_type, width){
  
  #Check again if needed
  # width not given guess
  if(road_type == 1 && width > 5){
    width <- 3
  }else if(road_type == 2 && width > 5) {
    width <- 4
  }else if(road_type == 9 && width > 5) {
    width <- 3
  }else if(road_type == 8 && width > 5) {
    width <- 3
  }else{
    width <- width
  }
  
  return(width)
  
}
#create a function to guess the width when missing or NA in master map
jointranfermissing_imp_add$averageWidth <- mapply(osm.join.width.clean, width = jointranfermissing_imp_add$averageWidth.imp, road_type = jointranfermissing_imp_add$road_type, SIMPLIFY = T, USE.NAMES = F)
#save the data
st_write(jointranfermissing_imp_add, dsn="road_width.gpkg",drivers = "GPKG")



